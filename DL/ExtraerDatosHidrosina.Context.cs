//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExtraerDatosHidrosinaEntities : DbContext
    {
        public ExtraerDatosHidrosinaEntities()
            : base("name=ExtraerDatosHidrosinaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dato> Datos { get; set; }
        public virtual DbSet<DatosPortal> DatosPortals { get; set; }
        public virtual DbSet<DatosPrueba> DatosPruebas { get; set; }
    
        public virtual int DatosAdd(string idFolioDeServicio, string prioridad, string tipoServicio, string sucursalConsignatario, string fechaCaptura, string fechaRealizarServicio, string ordenServicio, Nullable<decimal> importe, string divisa, string te, string horaEnvio, string actualización, string estatus)
        {
            var idFolioDeServicioParameter = idFolioDeServicio != null ?
                new ObjectParameter("IdFolioDeServicio", idFolioDeServicio) :
                new ObjectParameter("IdFolioDeServicio", typeof(string));
    
            var prioridadParameter = prioridad != null ?
                new ObjectParameter("Prioridad", prioridad) :
                new ObjectParameter("Prioridad", typeof(string));
    
            var tipoServicioParameter = tipoServicio != null ?
                new ObjectParameter("TipoServicio", tipoServicio) :
                new ObjectParameter("TipoServicio", typeof(string));
    
            var sucursalConsignatarioParameter = sucursalConsignatario != null ?
                new ObjectParameter("SucursalConsignatario", sucursalConsignatario) :
                new ObjectParameter("SucursalConsignatario", typeof(string));
    
            var fechaCapturaParameter = fechaCaptura != null ?
                new ObjectParameter("FechaCaptura", fechaCaptura) :
                new ObjectParameter("FechaCaptura", typeof(string));
    
            var fechaRealizarServicioParameter = fechaRealizarServicio != null ?
                new ObjectParameter("FechaRealizarServicio", fechaRealizarServicio) :
                new ObjectParameter("FechaRealizarServicio", typeof(string));
    
            var ordenServicioParameter = ordenServicio != null ?
                new ObjectParameter("OrdenServicio", ordenServicio) :
                new ObjectParameter("OrdenServicio", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(decimal));
    
            var divisaParameter = divisa != null ?
                new ObjectParameter("Divisa", divisa) :
                new ObjectParameter("Divisa", typeof(string));
    
            var teParameter = te != null ?
                new ObjectParameter("Te", te) :
                new ObjectParameter("Te", typeof(string));
    
            var horaEnvioParameter = horaEnvio != null ?
                new ObjectParameter("HoraEnvio", horaEnvio) :
                new ObjectParameter("HoraEnvio", typeof(string));
    
            var actualizaciónParameter = actualización != null ?
                new ObjectParameter("Actualización", actualización) :
                new ObjectParameter("Actualización", typeof(string));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DatosAdd", idFolioDeServicioParameter, prioridadParameter, tipoServicioParameter, sucursalConsignatarioParameter, fechaCapturaParameter, fechaRealizarServicioParameter, ordenServicioParameter, importeParameter, divisaParameter, teParameter, horaEnvioParameter, actualizaciónParameter, estatusParameter);
        }
    
        public virtual int DatosUpdate(string idFolioDeServicio, string prioridad, string tipoServicio, string sucursalConsignatario, string fechaCaptura, string fechaRealizarServicio, string ordenServicio, Nullable<decimal> importe, string divisa, string te, string horaEnvio, string actualización, string estatus)
        {
            var idFolioDeServicioParameter = idFolioDeServicio != null ?
                new ObjectParameter("IdFolioDeServicio", idFolioDeServicio) :
                new ObjectParameter("IdFolioDeServicio", typeof(string));
    
            var prioridadParameter = prioridad != null ?
                new ObjectParameter("Prioridad", prioridad) :
                new ObjectParameter("Prioridad", typeof(string));
    
            var tipoServicioParameter = tipoServicio != null ?
                new ObjectParameter("TipoServicio", tipoServicio) :
                new ObjectParameter("TipoServicio", typeof(string));
    
            var sucursalConsignatarioParameter = sucursalConsignatario != null ?
                new ObjectParameter("SucursalConsignatario", sucursalConsignatario) :
                new ObjectParameter("SucursalConsignatario", typeof(string));
    
            var fechaCapturaParameter = fechaCaptura != null ?
                new ObjectParameter("FechaCaptura", fechaCaptura) :
                new ObjectParameter("FechaCaptura", typeof(string));
    
            var fechaRealizarServicioParameter = fechaRealizarServicio != null ?
                new ObjectParameter("FechaRealizarServicio", fechaRealizarServicio) :
                new ObjectParameter("FechaRealizarServicio", typeof(string));
    
            var ordenServicioParameter = ordenServicio != null ?
                new ObjectParameter("OrdenServicio", ordenServicio) :
                new ObjectParameter("OrdenServicio", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(decimal));
    
            var divisaParameter = divisa != null ?
                new ObjectParameter("Divisa", divisa) :
                new ObjectParameter("Divisa", typeof(string));
    
            var teParameter = te != null ?
                new ObjectParameter("Te", te) :
                new ObjectParameter("Te", typeof(string));
    
            var horaEnvioParameter = horaEnvio != null ?
                new ObjectParameter("HoraEnvio", horaEnvio) :
                new ObjectParameter("HoraEnvio", typeof(string));
    
            var actualizaciónParameter = actualización != null ?
                new ObjectParameter("Actualización", actualización) :
                new ObjectParameter("Actualización", typeof(string));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DatosUpdate", idFolioDeServicioParameter, prioridadParameter, tipoServicioParameter, sucursalConsignatarioParameter, fechaCapturaParameter, fechaRealizarServicioParameter, ordenServicioParameter, importeParameter, divisaParameter, teParameter, horaEnvioParameter, actualizaciónParameter, estatusParameter);
        }
    
        public virtual ObjectResult<GetAllDatos_Result> GetAllDatos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDatos_Result>("GetAllDatos");
        }
    }
}
